<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ruleset name="erto-pmd-ruleset" 
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

	<description>
		PMD Plugin preferences rule set
	</description>

	<exclude-pattern>.*/generated/*.*</exclude-pattern>
	<exclude-pattern>.*/metamodel/*.*</exclude-pattern> 
	<exclude-pattern>.*/org/springframework/*.*</exclude-pattern> 
	<exclude-pattern>.*/pl/jsolve/templ4docx/*.*</exclude-pattern> 

	<rule ref="rulesets/java/android.xml"/>
	<!-- CollapsibleIfStatements kept in rulesset for now, can be reconsiderd later. -->
	<rule ref="rulesets/java/basic.xml"/>
	<rule ref="rulesets/java/braces.xml"/>
	<rule ref="rulesets/java/clone.xml"/>
	<!-- Adding comments isn't required. Usefull comments are always welcome.
	<rule ref="rulesets/java/comments.xml"/> -->
	<rule ref="rulesets/java/controversial.xml">
		<exclude name="AtLeastOneConstructor"/>
		<!-- Te veel onterechte meldingen. -->
		<exclude name="DataflowAnomalyAnalysis"/>
		<!-- Early return makes readable code, so one return disabled. -->
		<exclude name="OnlyOneReturn"/>
		<!-- Cannot find a LinkedHashMap that is also Concurrent -->
		<exclude name="UseConcurrentHashMap"/>
		<!-- I don't want to add static variable for NULL or ONE, TWO etc -->
		<exclude name="AvoidLiteralsInIfCondition"/>	
	</rule>
	<rule ref="rulesets/java/coupling.xml">
		<exclude name="LawOfDemeter"/>
	</rule>
	<rule ref="rulesets/java/design.xml">
		<properties>
	        <property name="violationSuppressRegex" value=".*Test"/>
	    </properties>
	</rule>
	<rule ref="rulesets/java/empty.xml"/>
	<rule ref="rulesets/java/finalizers.xml"/>
	<rule ref="rulesets/java/imports.xml"/>
	<rule ref="rulesets/java/j2ee.xml"/>
	<rule ref="rulesets/java/javabeans.xml">
		<!-- To many false positives, reconsider later. -->
		<exclude name="BeanMembersShouldSerialize"/>
	</rule>
	<rule ref="rulesets/java/junit.xml">
		<!-- JUnit tests may contain more then 1 assert, reconsider later to set a maximum. -->
		<exclude name="JUnitTestContainsTooManyAsserts"/>
	</rule>
	<rule ref="rulesets/java/logging-jakarta-commons.xml/UseCorrectExceptionLogging"/>
	<rule ref="rulesets/java/logging-jakarta-commons.xml/ProperLogger"/>
	<!-- Doet het nu alleen op debug statements, ook aanzetten op trace, info en warning -->
	<rule ref="rulesets/java/logging-jakarta-commons.xml/GuardDebugLogging"/>
	<!-- Dubbel op en mindere kwaliteit dan GuardDebugLogging, bovendien lukt het niet hem uit te zetten op error.
	<rule ref="rulesets/java/logging-jakarta-commons.xml/GuardLogStatement"/> -->
	<rule ref="rulesets/java/logging-java.xml">
		<!-- Dubbel op en mindere kwaliteit dan GuardDebugLogging. 
		<exclude name="GuardLogStatementJavaUtil"/>-->
	</rule>
	<rule ref="rulesets/java/migrating.xml"/>
	<rule ref="rulesets/java/migrating_to_13.xml"/>
	<rule ref="rulesets/java/migrating_to_14.xml"/>
	<rule ref="rulesets/java/migrating_to_15.xml"/>
	<rule ref="rulesets/java/migrating_to_junit4.xml"/>

	<!-- Naming rules gesplitst, zodat we enkele kunnen aanpassen -->
	<!-- results in too many false positives
      <rule ref="rulesets/java/naming.xml/ShortVariable"/> 
	-->   
	<!-- default 17 characters, important to use describing variables with line length 120 
	  <rule ref="rulesets/java/naming.xml/LongVariable" /> 
	-->
	<rule ref="rulesets/java/naming.xml/ShortMethodName"/>
	<rule ref="rulesets/java/naming.xml/VariableNamingConventions"/>
	<rule ref="rulesets/java/naming.xml/MethodNamingConventions"/>
	<rule ref="rulesets/java/naming.xml/ClassNamingConventions"/>
	<rule ref="rulesets/java/naming.xml/AbstractNaming"/>
	<rule ref="rulesets/java/naming.xml/AvoidDollarSigns"/>
	<rule ref="rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass"/>
	<rule ref="rulesets/java/naming.xml/SuspiciousHashcodeMethodName"/>
	<rule ref="rulesets/java/naming.xml/SuspiciousConstantFieldName"/>
	<rule ref="rulesets/java/naming.xml/SuspiciousEqualsMethodName"/>
	<rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingTypeName"/>
	<rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingMethodName"/>
	<rule ref="rulesets/java/naming.xml/NoPackage"/>
	<rule ref="rulesets/java/naming.xml/PackageCase"/>
	<rule ref="rulesets/java/naming.xml/MisleadingVariableName"/>
	<rule ref="rulesets/java/naming.xml/BooleanGetMethodName"/>
	<rule ref="rulesets/java/naming.xml/GenericsNaming"/>

	<rule ref="rulesets/java/optimizations.xml">
		<!-- There is general consensus that making method arguments and  
		local variables final isn't adding anything. -->
		<exclude name="MethodArgumentCouldBeFinal"/>
		<exclude name="LocalVariableCouldBeFinal"/>
		<exclude name="AvoidInstantiatingObjectsInLoops" /> <!-- can not always be avoided -->
	</rule>
	<rule ref="rulesets/java/strictexception.xml">
		<exclude name="AvoidCatchingGenericException" /> <!-- can not avoid catching exception if third party class throws exception in methode signature -->
		<exclude name="SignatureDeclareThrowsException"/> <!-- can not avoid declaration if third party interface throws exception in methode signature (like implementing InitializingBean) -->
	</rule>
	<rule ref="rulesets/java/strings.xml"/>
	<rule ref="rulesets/java/sunsecure.xml"/>
	<rule ref="rulesets/java/typeresolution.xml">
		<exclude name="SignatureDeclareThrowsException"/> <!-- can not avoid declaration if third party interface throws exception in methode signature (like implementing InitializingBean) -->
	</rule>
	<rule ref="rulesets/java/unnecessary.xml"/>
	<rule ref="rulesets/java/unusedcode.xml"/>
	
	<!-- Codesize minimum's -->
	
	<rule ref="rulesets/java/codesize.xml">
		<exclude name="CyclomaticComplexity" />
		<exclude name="ModifiedCyclomaticComplexity" />
		<exclude name="StdCyclomaticComplexity" />
		<exclude name="NPathComplexity" />
		<exclude name="ExcessiveMethodLength" />
		<exclude name="TooManyMethods" />
		<exclude name="ExcessivePublicCount" />
	</rule>
	
	<rule ref="rulesets/java/codesize.xml/CyclomaticComplexity">
	    <properties>
	        <property name="reportLevel" value="38"/>
	    </properties>
	</rule>
	
	<rule ref="rulesets/java/codesize.xml/ModifiedCyclomaticComplexity">
		<properties>
			<property name="reportLevel" value="26" />
		</properties>
	</rule>
	
	<rule ref="rulesets/java/codesize.xml/StdCyclomaticComplexity">
		<properties>
			<property name="reportLevel" value="34" />
		</properties>
	</rule>
	
	<rule ref="rulesets/java/codesize.xml/NPathComplexity">
		<properties>
			<property name="minimum" value="1299066615" />
		</properties>
	</rule>
	
	<rule ref="rulesets/java/codesize.xml/ExcessiveMethodLength">
		<properties>
			<property name="minimum" value="200" />
		</properties>
	</rule>
	
	<rule ref="rulesets/java/codesize.xml/TooManyMethods">
	    <properties>
	        <property name="maxmethods" value="23"/>
	        <property name="violationSuppressRegex" value=".*Test"/>
	    </properties>
	</rule>
	
	<rule ref="rulesets/java/codesize.xml/ExcessivePublicCount">
	    <properties>
	        <property name="minimum" value="58"/>
	        <property name="violationSuppressRegex" value=".*Test"/>
	    </properties>
	</rule>
</ruleset>